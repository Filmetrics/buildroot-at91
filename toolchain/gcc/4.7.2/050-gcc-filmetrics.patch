Patch for the GCC compiler package; will not build without this patch.

These changes can be found in the official GCC SVN repository, revision 208260.

See: http://gcc.gnu.org/viewcvs/gcc?view=revision&revision=208260

Raphael Oberson, Filmetrics Inc., 2014-05-02

diff -urp gcc-4.7.2.orig/gcc/config/lm32/lm32.c gcc-4.7.2/gcc/config/lm32/lm32.c
--- gcc-4.7.2.orig/gcc/config/lm32/lm32.c	2011-08-18 05:37:53.000000000 -0700
+++ gcc-4.7.2/gcc/config/lm32/lm32.c	2014-05-02 15:47:31.146238772 -0700
@@ -81,7 +81,6 @@ static rtx lm32_function_arg (cumulative
 static void lm32_function_arg_advance (cumulative_args_t cum,
 				       enum machine_mode mode,
 				       const_tree type, bool named);
-static bool lm32_legitimate_constant_p (enum machine_mode, rtx);
 
 #undef TARGET_OPTION_OVERRIDE
 #define TARGET_OPTION_OVERRIDE lm32_option_override
@@ -109,8 +108,6 @@ static bool lm32_legitimate_constant_p (
 #define TARGET_CAN_ELIMINATE lm32_can_eliminate
 #undef TARGET_LEGITIMATE_ADDRESS_P
 #define TARGET_LEGITIMATE_ADDRESS_P lm32_legitimate_address_p
-#undef TARGET_LEGITIMATE_CONSTANT_P
-#define TARGET_LEGITIMATE_CONSTANT_P lm32_legitimate_constant_p
 
 struct gcc_target targetm = TARGET_INITIALIZER;
 
@@ -1230,15 +1227,3 @@ lm32_move_ok (enum machine_mode mode, rt
     return register_or_zero_operand (operands[1], mode);
   return true;
 }
-
-/* Implement TARGET_LEGITIMATE_CONSTANT_P.  */
-
-static bool
-lm32_legitimate_constant_p (enum machine_mode mode, rtx x)
-{
-  /* 32-bit addresses require multiple instructions.  */  
-  if (!flag_pic && reloc_operand (x, mode))
-    return false; 
-  
-  return true;
-}
diff -urp gcc-4.7.2.orig/gcc/config/lm32/lm32.md gcc-4.7.2/gcc/config/lm32/lm32.md
--- gcc-4.7.2.orig/gcc/config/lm32/lm32.md	2011-02-25 11:24:20.000000000 -0800
+++ gcc-4.7.2/gcc/config/lm32/lm32.md	2014-05-02 15:47:31.146238772 -0700
@@ -293,8 +293,8 @@
 )
 
 (define_insn "movsi_insn"
-  [(set (match_operand:SI 0 "nonimmediate_operand" "=r,r,m,m,r,r,r,r,r")
-        (match_operand:SI 1 "movsi_rhs_operand" "m,r,r,J,K,L,U,S,Y"))]
+  [(set (match_operand:SI 0 "nonimmediate_operand" "=r,r,m,m,r,r,r,r,r,r")
+        (match_operand:SI 1 "general_operand" "m,r,r,J,K,L,U,S,Y,n"))]
   "lm32_move_ok (SImode, operands)"
   "@
    lw       %0, %1
@@ -305,8 +305,9 @@
    ori      %0, r0, %1
    orhi     %0, r0, hi(%1)
    mva      %0, gp(%1)
-   orhi     %0, r0, hi(%1)"
-  [(set_attr "type" "load,arith,store,store,arith,arith,arith,arith,arith")]   
+   orhi     %0, r0, hi(%1)
+   ori      %0, r0, lo(%1); orhi     %0, %0, hi(%1)"
+  [(set_attr "type" "load,arith,store,store,arith,arith,arith,arith,arith,arith")]   
 )
 
 ;; ---------------------------------
@@ -636,9 +637,28 @@
   [(set_attr "type" "uibranch")]  
 )
 
-(define_insn "return"
+(define_expand "return"
   [(return)]
   "lm32_can_use_return ()"
+  ""
+) 
+
+(define_expand "simple_return"
+  [(simple_return)]
+  ""
+  ""
+) 
+
+(define_insn "*return"
+  [(return)]
+  "reload_completed"
+  "ret"
+  [(set_attr "type" "uibranch")]  
+) 
+
+(define_insn "*simple_return"
+  [(simple_return)]
+  ""
   "ret"
   [(set_attr "type" "uibranch")]  
 ) 
diff -urp gcc-4.7.2.orig/gcc/config/lm32/predicates.md gcc-4.7.2/gcc/config/lm32/predicates.md
--- gcc-4.7.2.orig/gcc/config/lm32/predicates.md	2009-11-11 08:43:06.000000000 -0800
+++ gcc-4.7.2/gcc/config/lm32/predicates.md	2014-05-02 15:47:31.158239306 -0700
@@ -70,8 +70,3 @@
   (ior (match_code "symbol_ref")
        (match_operand 0 "register_operand")))
 
-(define_predicate "movsi_rhs_operand"
-  (ior (match_operand 0 "nonimmediate_operand")
-       (ior (match_code "const_int")
-            (ior (match_test "satisfies_constraint_S (op)")
-                 (match_test "satisfies_constraint_Y (op)")))))
diff -urp gcc-4.7.2.orig/gcc/configure.ac gcc-4.7.2/gcc/configure.ac
--- gcc-4.7.2.orig/gcc/configure.ac	2012-09-13 06:32:31.000000000 -0700
+++ gcc-4.7.2/gcc/configure.ac	2014-05-02 15:47:31.162239453 -0700
@@ -1234,6 +1234,10 @@ force_sjlj_exceptions=yes],
     force_sjlj_exceptions=yes
     enableval=yes
     ;;
+  lm32*-*-*)
+     force_sjlj_exceptions=yes
+     enableval=yes
+     ;;
   *)
     force_sjlj_exceptions=no
     ;;
